buildscript {
	repositories {
		mavenCentral()
		//Needed only for SNAPSHOT versions
		//maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
	}
	dependencies {
		classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.5.2'
		classpath "org.openapitools:openapi-generator-gradle-plugin:6.6.0"
	}
}

plugins {
	id 'java'

	// Spring
	id 'org.springframework.boot' version '2.3.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'

	// Test coverage
	id 'jacoco'

	// Code style
    id 'checkstyle'

	// PMD
	id 'pmd'

	// PITest
	id 'info.solidsoft.pitest' version '1.5.2'
}

group = 'nl.tudelft.cse.sem.v20232024.team08b'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 15
targetCompatibility = 15

repositories {
	mavenCentral()
}

dependencies {

	testImplementation 'junit:junit:4.13.1'
    compileOnly 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

//	testImplementation "org.wiremock:wiremock:3.3.1"
//	testImplementation 'com.maciejwalkowiak.spring:wiremock-spring-boot:2.0.0'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'



	// SpringDoc OpenAPI Generation
	implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'

	// Local test database (in-memory)
	implementation 'com.h2database:h2'
	developmentOnly 'org.hibernate:hibernate-entitymanager'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation('org.junit.jupiter:junit-jupiter:5.8.2')
	testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.12.4'
	testImplementation('org.assertj:assertj-core:3.23.1')
}

test {
	useJUnitPlatform()
	jacoco {
		enabled = true
		includes = ['nl.tudelft.sem.v20232024.team08b.*']
	}
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = "0.8.7" // Use the desired version of JaCoCo
}
jacocoTestReport {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['**/submissions/**',
										'**/users/**',
										'**/ignore/**',
										'**/config/**'])
		}))
	}
}
jacocoTestCoverageVerification() {
	dependsOn test
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'
			includes = ['nl.tudelft.sem.v20232024.team08b.*']
			excludes = ['nl.tudelft.sem.v20232024.team08b.dtos.submissions',
						'nl.tudelft.sem.v20232024.team08b.dtos.users',
						'ignore']
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.0
			}
		}
	}
}

checkstyle {
	toolVersion "8.37"
	configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
	ignoreFailures = false
	maxErrors = 0
	maxWarnings = 0
}
pmd {

	incrementalAnalysis = true
	sourceSets = [sourceSets.main]
	ruleSetFiles = files("${rootDir}/config/pmd/errorprone.xml")    // exactly path as in your lib classpath
	ruleSets = []
}



apply plugin: 'info.solidsoft.pitest'
pitest {
	//adds dependency to org.pitest:pitest-junit5-plugin and sets "testPlugin" to "junit5"
	junit5PluginVersion = '0.12'

	targetClasses = ['nl.tudelft.sem.v20232024.team08b.*']  //by default "${project.group}.*"
	excludedClasses = ['nl.tudelft.sem.v20232024.team08b.config.*',
					   'nl.tudelft.sem.v20232024.team08b.dtos.*']	// TODO: maybe include our DTOs for testing
	pitestVersion = '1.5.1' //not needed when a default PIT version should be used
	threads = 4
	outputFormats = ['XML', 'HTML']
	timestampedReports = false
}

apply plugin: 'org.openapi.generator'
task generateSubmissions(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	generatorName.set("spring")
	inputSpec.set("$rootDir/reviews-microservice/src/main/resources/teamA.yaml")
	outputDir.set("$buildDir/generated")
	modelPackage.set("nl.tudelft.sem.v20232024.team08b.dtos.submissions")
	apiPackage.set("ignore")
	configOptions.set([
			dateLibrary: "java15"
	])
	configOptions = [
			interfaceOnly: 'true',
			openApiNullable: 'false'
	]
}
task generateUsers(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	generatorName.set("spring")
	inputSpec.set("$rootDir/reviews-microservice/src/main/resources/teamC.yaml")
	outputDir.set("$buildDir/generated")
	modelPackage.set("nl.tudelft.sem.v20232024.team08b.dtos.users")
	apiPackage.set("ignore")
	configOptions.set([
			dateLibrary: "java15"
	])
	configOptions = [
			interfaceOnly: 'true',
			openApiNullable: 'false'
	]
}

compileJava.dependsOn tasks.named("generateSubmissions")
compileJava.dependsOn tasks.named("generateUsers")

sourceSets {
	getByName("main") {
		java {
			srcDir("$buildDir/generated/src/main/java")
		}
	}
}
